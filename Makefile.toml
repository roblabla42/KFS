[config]
skip_core_tasks = true
min_version = "0.22.0"
default_to_workspace = false

[env]
RUST_TARGET_PATH = "${CARGO_MAKE_WORKING_DIRECTORY}"
XARGO_RUST_SRC = "${CARGO_MAKE_WORKING_DIRECTORY}/rust/src"
GDB_PORT = { script = ["echo ${GDB_PORT:-9090}"] }
VNC_PORT = { script = ["echo ${VNC_PORT:-:0}"] }
CLIPPY_RULES = """
-A clippy::redundant_field_names \
-A clippy::unreadable_literal \
-A clippy::identity_op \
-A clippy::zero_prefixed_literal \
-A clippy::redundant_closure \
-W clippy::cast_possible_wrap \
-W clippy::cast_sign_loss \
-W clippy::default_trait_access \
-W clippy::explicit_into_iter_loop \
-W clippy::explicit_iter_loop \
-W clippy::missing_docs_in_private_items \
-W clippy::mut_mut \
-W clippy::replace_consts \
-W clippy::used_underscore_binding \
-W clippy::wildcard_dependencies \
-W clippy::wrong_pub_self_convention"""
QEMU_COMMON_FLAGS = """\
    -boot d \
    -cdrom os.iso \
    -serial mon:stdio \
    -vnc ${VNC_PORT} \
    -no-reboot \
    -drive id=diskA,file=DISK.img,format=raw,if=none -device ahci,id=ahci \
    -device ide-drive,drive=diskA,bus=ahci.0 \
    -machine q35,smm=on, \
    -m 512""" # 512MiB ram is required for UEFI boot. Go figure...

#### Profile-specific flags
# Which subfolder of target will rustc put its files into. Target is
# automatically prepended if necessary.
PROFILE_NAME = "debug"
# Flags to pass to cargo when building any project.
COMPILER_FLAGS = ""
# Extra flags to pass when building the kernel. Appended to COMPILER_FLAGS.
KERNEL_FLAGS = ""
# Extra flags to pass to qemu.
QEMU_PROFILE_FLAGS = ""

[env.development]
PROFILE_NAME = "debug"
COMPILER_FLAGS = ""
KERNEL_FLAGS = "-Z package-features --features=panic-on-exception"
QEMU_EXTRA_FLAGS = "-d cpu_reset"

[env.production]
PROFILE_NAME = "release"
COMPILER_FLAGS = "--release"
KERNEL_FLAGS = ""
QEMU_EXTRA_FLAGS = ""

[tasks.bootstrap-linker]
script_runner = "@shell"
script = ["cp linker-scripts/bootstrap.ld link.T"]

[tasks.kernel-linker]
script_runner = "@shell"
script = ["cp linker-scripts/kernel.ld    link.T"]

[tasks.install-rust-src]
install_crate = { rustup_component_name = "rust-src" }

[tasks.install-mkisofs-rs]
install_crate = { crate_name = "mkisofs-rs", binary = "mkisofs-rs", test_arg = "--help", min_version = "0.1.1" }

[tasks.install-xargo]
dependencies = ["install-rust-src"]
install_crate = { crate_name = "xargo", binary = "xargo", test_arg = "--version", min_version = "0.3.16" }

[tasks.gen-secureboot-keys]
# https://wiki.gentoo.org/wiki/Sakaki%27s_EFI_Install_Guide/Configuring_Secure_Boot
# This link is the most useful stuff I could find.
# We're going to use the same key for the PK, the KEK and the DB. No reason to
# make an overcomplicated setup.
condition = { platforms = ["linux"] }
script = ['''
mkdir -p target/keys
# Generate the Secure Boot Key.
# TODO: Integrate secureboot key generation into setup-ovmf.
# BODY: Secure boot keygen depends on openssl, efitools and sed - none of which
# BODY: are available on windows. We should integrate it all into the
# BODY: gen-secureboot-keys tool.
openssl req -new -x509 -newkey rsa:2048 -subj "/CN=SecureBoot Platform Key/" -outform PEM -keyout target/keys/PK.key -out target/keys/PK.crt -nodes -sha256

# Random UUID chosen by fair dice roll.
cert-to-efi-sig-list -g "6270c1f5-7f36-4239-8be0-b617d586e07e" target/keys/PK.crt target/keys/PK.esl

# Not a random UUID. This is used by OVMF to detect the PK.crt in the SMBIOS
# type 11 strings.
sed \
    -e 's/^-----BEGIN CERTIFICATE-----$/4e32566d-8e9e-4f52-81d3-5bb9715f9727:/' \
    -e '/^-----END CERTIFICATE-----$/d' \
    <target/keys/PK.crt \
    | tr -d '\n' > target/keys/PK.oemstr
''']

[tasks.setup-ovmf]
condition = { platforms = ["linux"] }
dependencies = ["gen-secureboot-keys"]
command = "cargo"
args = ["run", "-p", "gen-secureboot-keys"]

[tasks.bootstrap]
description = "Compiles the i386 bootstrap"
dependencies = ["bootstrap-linker", "install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-none", "--package=sunrise-bootstrap", "@@split(COMPILER_FLAGS, )" ]

[tasks.kernel]
description = "Compiles the kernel"
dependencies = ["kernel-linker", "install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-none", "--package=sunrise-kernel", "@@split(COMPILER_FLAGS, )", "@@split(KERNEL_FLAGS, )"]

[tasks.vi]
description = "Compiles sunrise-vi"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=sunrise-vi", "@@split(COMPILER_FLAGS, )"]

[tasks.sm]
description = "Compiles sunrise-sm"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=sunrise-sm", "@@split(COMPILER_FLAGS, )"]

[tasks.shell]
description = "Compiles sunrise-shell"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=sunrise-shell", "@@split(COMPILER_FLAGS, )"]

[tasks.wall-clock]
description = "Compiles sunrise-wall-clock"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=sunrise-wall-clock", "@@split(COMPILER_FLAGS, )"]

[tasks.ahci]
description = "Compiles sunrise-ahci"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=sunrise-ahci", "@@split(COMPILER_FLAGS, )"]

[tasks.time]
description = "Compiles sunrise-time"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=sunrise-time", "@@split(COMPILER_FLAGS, )"]

[tasks.fs]
description = "Compiles sunrise-fs"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=sunrise-fs", "@@split(COMPILER_FLAGS, )"]

[tasks.loader]
description = "Compiles sunrise-loader"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=sunrise-loader", "@@split(COMPILER_FLAGS, )"]

[tasks.keyboard]
description = "Compiles sunrise-keyboard"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=sunrise-keyboard", "@@split(COMPILER_FLAGS, )"]

[tasks.twili]
description = "Compiles sunrise-twili"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=sunrise-twili", "@@split(COMPILER_FLAGS, )"]

[tasks.std_hello_world]
description = "Compiles std_hello_world"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=std_hello_world", "@@split(COMPILER_FLAGS, )"]

[tasks.uutils]
description = "Compiles uutils (coreutils)"
dependencies = ["install-xargo"]
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "--package=uutils", "-Z", "package-features", "--features=sunrise", "--no-default-features", "@@split(COMPILER_FLAGS, )"]

[tasks.userspace-nostd]
internal = true
command = "xargo"
args = ["build", "--target=i386-unknown-sunrise-user", "@@split(COMPILER_FLAGS, )",
    "-p", "sunrise-shell", "-p", "sunrise-wall-clock", "-p", "sunrise-sm",
    "-p", "sunrise-vi", "-p", "sunrise-ahci", "-p", "sunrise-time",
    "-p", "sunrise-fs", "-p", "sunrise-loader", "-p", "sunrise-keyboard",
    "-p", "sunrise-twili"
]

[tasks.userspace]
description = "Compiles userspace apps"
dependencies = ["userspace-nostd", "std_hello_world", "uutils"]

[tasks.iso-common]
private = true
description = "Copies the KIPs to the isofiles folder."
dependencies = ["bootstrap", "kernel", "userspace"]
script_runner = "@shell"
script = ['''
mkdir -p target/isofiles/boot
cp target/i386-unknown-none/$PROFILE_NAME/sunrise-bootstrap           target/isofiles/boot/
cp target/i386-unknown-none/$PROFILE_NAME/sunrise-kernel              target/isofiles/boot/
cp target/i386-unknown-sunrise-user/$PROFILE_NAME/sunrise-shell       target/isofiles/boot/
cp target/i386-unknown-sunrise-user/$PROFILE_NAME/sunrise-time        target/isofiles/boot/
cp target/i386-unknown-sunrise-user/$PROFILE_NAME/sunrise-wall-clock  target/isofiles/boot/
cp target/i386-unknown-sunrise-user/$PROFILE_NAME/sunrise-sm          target/isofiles/boot/
cp target/i386-unknown-sunrise-user/$PROFILE_NAME/sunrise-vi          target/isofiles/boot/
cp target/i386-unknown-sunrise-user/$PROFILE_NAME/sunrise-ahci        target/isofiles/boot/
cp target/i386-unknown-sunrise-user/$PROFILE_NAME/sunrise-fs          target/isofiles/boot/
''']

[tasks.iso]
description = "Creates a bootable ISO containing the kernel and grub."
dependencies = ["iso-common", "install-mkisofs-rs"]
script_runner = "@shell"
script = [
'''
mkisofs-rs external/grub/isofiles isofiles target/isofiles/ -o os.iso -b boot/grub/i386-pc/eltorito.img --no-emul-boot --boot-info-table --embedded-boot external/grub/embedded.img
''']

[tasks.iso-secure]
description = "Generate a secure GRUB UEFI image, and creates a bootable ISO with it."
dependencies = ["iso-common", "gen-secureboot-keys", "install-mkisofs-rs"]
script = ['''
# Sign GRUB configuration and kernel with a fresh key.
TEMPDIR=$(mktemp -d)
TEMPFILE=$(mktemp)
cat >$TEMPFILE <<EOF
    Key-Type: RSA
    Key-Length: 2048
    Key-Usage: encrypt,sign,auth
    Name-Real: secureboot
    Name-Comment: Secure Boot Key
    Name-Email: none@none.com
    Expire-Date: 0
    %no-ask-passphrase
    %no-protection
    %commit
    %echo done
EOF

gpg --homedir $TEMPDIR --batch --gen-key $TEMPFILE

for i in `find external/grub/isofiles/boot/ isofiles/boot/ target/isofiles/boot/ \( -name "*.cfg" -or -name "*.png" -or \
  -name "*.mod" -or -name "*.lst" -or -name "sunrise-*" \) -and ! -name "*.sig"`;
do
  # First strip prefix
  filename=${i#"external/grub/isofiles/boot/"}
  filename=${filename#"target/isofiles/boot/"}
  filename=${filename#"isofiles/boot/"}

  mkdir -p $(dirname target/isofiles/boot/$filename)
  gpg --homedir $TEMPDIR -u secureboot --yes --batch --output target/isofiles/boot/${filename}.sig --detach-sign $i
done

# Install GRUB as an EFI bootloader.
gpg --yes --homedir $TEMPDIR --export --output target/keys/grub_secureboot.key
mkdir -p target/isofiles/efi/boot
grub-mkimage --pubkey target/keys/grub_secureboot.key -c external/embedded_grub.cfg -O x86_64-efi -p "" -o target/grubx64.efi --compression=xz ahci part_msdos part_gpt normal configfile true test efi_uga efi_gop gfxterm gfxmenu gfxterm_menu fat multiboot2 probe parttool png all_video gfxterm_background gettext pgp gcry_sha256 gcry_rsa
sbsign --key target/keys/PK.key --cert target/keys/PK.crt --output target/isofiles/efi/boot/bootx64.efi target/grubx64.efi
mkisofs-rs external/grub/isofiles isofiles target/isofiles/ -o os.iso -b boot/grub/i386-pc/eltorito.img --no-emul-boot --boot-info-table --embedded-boot external/grub/embedded.img
'''
]

[tasks.disk]
description = "Creates a disk image with SunriseOS installed."
dependencies = ["iso"]
command = "cargo"
# Order of the folders is important. The first elements get priority.
args = ["run", "--manifest-path", "disk-initializer/Cargo.toml", "--", "DISK.img", "209715200", "target/isofiles/", "isofiles/", "external/filesystem/disk_template/"]

[tasks.disk-secure]
extend = "disk"
dependencies = ["iso-secure"]

[tasks.qemu]
description = "Runs SunriseOS in qemu."
dependencies = ["disk"]
# No secure boot args
command = "qemu-system-x86_64"
args = [
    "@@split(QEMU_COMMON_FLAGS, )", "@@split(QEMU_EXTRA_FLAGS, )",
]

[tasks.qemu-secure]
description = "Runs SunriseOS in a SecureBoot-enabled qemu."
dependencies = ["disk-secure", "setup-ovmf"]
env.KEY = { script = "cat target/keys/PK.oemstr" }
command = "qemu-system-x86_64"
args = [
    "@@split(QEMU_COMMON_FLAGS, )", "@@split(QEMU_EXTRA_FLAGS, )",
    "-drive", "if=pflash,format=raw,readonly,file=external/ovmf/OVMF_CODE-pure-efi.fd",
    "-drive", "if=pflash,format=raw,readonly,file=target/OVMF_VARS.fd",
    "-global", "driver=cfi.pflash01,property=secure,value=on",
    "-smbios", "type=11,value=${KEY}",
    "-debugcon", "file:debug.log", "-global", "isa-debugcon.iobase=0x402"
]

[tasks.qemu-gdb]
description = "Runs the bootable ISO in qemu."
dependencies = ["disk"]
command = "qemu-system-i386"
args = [
    "@@split(QEMU_COMMON_FLAGS, )", "@@split(QEMU_EXTRA_FLAGS, )",
    "-gdb", "tcp::${GDB_PORT}", "-S"
]

[tasks.doc]
description = "Generate the project's documentation"
env = { "RUSTDOCFLAGS" = "-Z unstable-options --enable-index-page" }
command = "cargo"
args = ["doc", "--no-deps"]

[tasks.doc-full]
description = "Generate the project's documentation, including private items"
env = { "RUSTDOCFLAGS" = "-Z unstable-options --enable-index-page" }
command = "cargo"
args = ["doc", "--no-deps", "--document-private-items",
    "-p", "docs",
    "-p", "sunrise-bootstrap",
    "-p", "sunrise-kernel",
    "-p", "sunrise-shell",
    "-p", "sunrise-time",
    "-p", "sunrise-libuser",
    "-p", "sunrise-wall-clock",
    "-p", "sunrise-sm",
    "-p", "sunrise-vi",
    "-p", "sunrise-ahci",
    "-p", "sunrise-fs",
    "-p", "sunrise-libutils",
    "-p", "sunrise-libkern",
    "-p", "sunrise-libtimezone",
    "-p", "sunrise-loader",
    "-p", "sunrise-keyboard",
    "-p", "swipc-gen",
    "-p", "swipc-parser",
    "-p", "disk-initializer",
]

[tasks.deploy-doc]
install_crate = { crate_name = "cargo-travis", binary = "cargo", test_arg = ["doc-upload", "--help"] }
install_crate_args = ["--git", "https://github.com/roblabla/cargo-travis", "--rev", "doc-upload-target"]
description = "Upload this project's documentation on github pages. Should only run on CI."
command = "cargo"
args = ["doc-upload", "--clobber-index"]

[tasks.testdoc]
# We don't set the target because of https://github.com/rust-lang/cargo/issues/6460
# See #226
description = "Run the doctests - doesn't set the target"
command = "cargo"
args = ["test", "--doc",
    "-p", "docs",
    "-p", "sunrise-bootstrap",
    "-p", "sunrise-kernel",
    "-p", "sunrise-shell",
    "-p", "sunrise-time",
    "-p", "sunrise-libuser",
    "-p", "sunrise-wall-clock",
    "-p", "sunrise-sm",
    "-p", "sunrise-vi",
    "-p", "sunrise-ahci",
    "-p", "sunrise-fs",
    "-p", "sunrise-libutils",
    "-p", "sunrise-libkern",
    "-p", "sunrise-libtimezone",
    "-p", "sunrise-loader",
    "-p", "sunrise-keyboard",
    "-p", "swipc-gen",
    "-p", "swipc-parser",
    "-p", "disk-initializer",
]

[tasks.testinner]
description = "Run the tests in 32bit mode"
command = "cargo"
args = ["test", "--target=i686-unknown-linux-gnu",
    "-p", "docs",
    "-p", "sunrise-bootstrap",
    "-p", "sunrise-kernel",
    "-p", "sunrise-shell",
    "-p", "sunrise-time",
    "-p", "sunrise-libuser",
    "-p", "sunrise-wall-clock",
    "-p", "sunrise-sm",
    "-p", "sunrise-vi",
    "-p", "sunrise-ahci",
    "-p", "sunrise-fs",
    "-p", "sunrise-libutils",
    "-p", "sunrise-libkern",
    "-p", "sunrise-libtimezone",
    "-p", "sunrise-loader",
    "-p", "sunrise-keyboard",
    "-p", "swipc-gen",
    "-p", "swipc-parser",
    "-p", "disk-initializer",
]

[tasks.test]
description = "Run all the tests."
dependencies = ["testdoc", "testinner"]

[tasks.refresh-crates]
description = "Make cargo-clippy work..."
command = "touch"
args = ["-c", "kernel/src/main.rs", "bootstrap/src/main.rs",
	"shell/src/main.rs", "libuser/src/lib.rs", "wall-clock/src/main.rs",
	"sm/src/main.rs", "vi/src/main.rs", "ahci/src/main.rs",
	"libutils/src/lib.rs", "libkern/src/lib.rs", "swipc-gen/src/lib.rs",
	"swipc-parser/src/lib.rs", "time/src/main.rs", "libtimezone/src/lib.rs",
	"loader/src/main.rs", "keyboard/src/main.rs", "twili/src/main.rs"
]

[tasks.clippy-sunrise-kernel-target]
description = "Run clippy on sunrise kernel and bootstrap"
dependencies = ["install-xargo", "refresh-crates"]
install_crate = { rustup_component_name = "clippy" }
command = "xargo"
args = ["clippy", "--target=i386-unknown-none",
    "-p", "sunrise-kernel",
    "-p", "sunrise-bootstrap",
	"--",
	"@@split(CLIPPY_RULES, )",
	"${@}",
	]

[tasks.clippy-sunrise-userspace-target]
description = "Run clippy on sunrise userspace"
dependencies = ["install-xargo", "refresh-crates"]
install_crate = { rustup_component_name = "clippy" }
command = "xargo"
args = ["clippy", "--target=i386-unknown-sunrise-user",
    "-p", "sunrise-shell",
    "-p", "sunrise-time",
    "-p", "sunrise-libuser",
    "-p", "sunrise-wall-clock",
    "-p", "sunrise-sm",
    "-p", "sunrise-vi",
    "-p", "sunrise-ahci",
    "-p", "sunrise-fs",
    "-p", "sunrise-libutils",
    "-p", "sunrise-libkern",
    "-p", "sunrise-libtimezone",
    "-p", "sunrise-loader",
    "-p", "sunrise-keyboard",
	"--",
	"@@split(CLIPPY_RULES, )",
	"${@}",
	]

[tasks.clippy-host-target]
description = "Run clippy on host components (relying on std)"
dependencies = ["refresh-crates"]
install_crate = { rustup_component_name = "clippy" }
command = "cargo"
args = ["clippy",
	"-p", "swipc-gen", "-p", "swipc-parser", "-p", "docs", "-p", "disk-initializer",
	"-p", "gen-secureboot-keys",
	"--",
	"@@split(CLIPPY_RULES, )",
	"${@}",
	]

[tasks.clippy]
dependencies = ["clippy-host-target", "clippy-sunrise-kernel-target", "clippy-sunrise-userspace-target"]

[tasks.swipc-gen]
description = "Get the output of running gen_ipc on an ipcdef file"
command = "cargo"
args = ["run", "--manifest-path", "swipc-gen/Cargo.toml", "--features=binaries", "--", "${@}"]

[tasks.default]
run_task = "qemu"
