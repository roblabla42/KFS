[config]
skip_core_tasks = true

[env]
RUST_TARGET_PATH = "${PWD}"
GDB_PORT = { script = ["echo ${GDB_PORT:-9090}"] }
VNC_PORT = { script = ["echo ${VNC_PORT:-:0}"] }
TARGET = { script = ["echo ${TARGET:-i386-unknown-none}"] }
TARGET_PATH = "${TARGET}/debug"
# TODO: Find better work around cargo build not accepting empty arguments
RELEASE_FLAG = "--message-format=human"

[env.production]
TARGET_PATH = "${TARGET}/release"
RELEASE_FLAG = "--release"

[tasks.bootstrap-linker]
workspace = false
script = ["cp linker-scripts/bootstrap.ld link.T"]

[tasks.kernel-linker]
workspace = false
script = ["cp linker-scripts/kernel.ld    link.T"]

[tasks.userspace-linker]
workspace = false
script = ["cp linker-scripts/userspace.ld    link.T"]

[tasks.install-rust-src]
install_crate = { rustup_component_name = "rust-src" }

[tasks.install-mkisofs-rs]
install_crate = { crate_name = "mkisofs-rs", binary = "mkisofs-rs", test_arg = "--help" }

[tasks.bootstrap]
workspace = false
description = "Compiles the i386 bootstrap"
dependencies = ["bootstrap-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=${TARGET}", "--package=kfs-bootstrap", "${RELEASE_FLAG}"]

[tasks.kernel]
workspace = false
description = "Compiles the kernel"
dependencies = ["kernel-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=${TARGET}", "--package=kfs-kernel", "-Z", "package-features", "--features=panic-on-exception", "${RELEASE_FLAG}"]

[tasks.vi]
workspace = false
description = "Compiles kfs-vi"
dependencies = ["userspace-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=${TARGET}", "--package=kfs-vi", "${RELEASE_FLAG}"]

[tasks.sm]
workspace = false
description = "Compiles kfs-sm"
dependencies = ["userspace-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=${TARGET}", "--package=kfs-sm", "${RELEASE_FLAG}"]

[tasks.shell]
workspace = false
description = "Compiles kfs-shell"
dependencies = ["userspace-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=${TARGET}", "--package=kfs-shell", "${RELEASE_FLAG}"]

[tasks.clock]
workspace = false
description = "Compiles kfs-clock"
dependencies = ["userspace-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=${TARGET}", "--package=kfs-clock", "${RELEASE_FLAG}"]

[tasks.ahci]
workspace = false
description = "Compiles kfs-ahci"
dependencies = ["userspace-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=${TARGET}", "--package=kfs-ahci", "${RELEASE_FLAG}"]

[tasks.userspace]
workspace = false
description = "Compiles userspace apps"
dependencies = ["shell", "clock", "sm", "vi", "ahci"]

[tasks.iso]
workspace = false
description = "Creates a bootable ISO containing the kernel and grub."
dependencies = ["bootstrap", "kernel", "userspace", "install-mkisofs-rs"]
script = [
'''
cp target/${TARGET_PATH}/kfs-bootstrap isofiles/boot/
cp target/${TARGET_PATH}/kfs-kernel    isofiles/boot/
cp target/${TARGET_PATH}/kfs-shell     isofiles/boot/
cp target/${TARGET_PATH}/kfs-clock     isofiles/boot/
cp target/${TARGET_PATH}/kfs-sm        isofiles/boot/
cp target/${TARGET_PATH}/kfs-vi        isofiles/boot/
cp target/${TARGET_PATH}/kfs-ahci      isofiles/boot/
mkisofs-rs external/grub/isofiles isofiles -o os.iso -b boot/grub/i386-pc/eltorito.img --no-emul-boot --boot-info-table --embedded-boot external/grub/embedded.img
'''
]

[tasks.qemu]
workspace = false
description = "Runs the bootable ISO in qemu."
dependencies = ["iso"]
command = "qemu-system-i386"
args = ["-cdrom", "os.iso", "-serial", "stdio", "-vnc", "${VNC_PORT}", "-no-reboot", "-enable-kvm"]

[tasks.qemu-debug]
workspace = false
description = "Runs the bootable ISO in qemu with gdb support"
dependencies = ["iso"]
command = "qemu-system-i386"
args = ["-cdrom", "os.iso", "-serial", "stdio", "-vnc", "${VNC_PORT}", "-no-reboot", "-gdb", "tcp::${GDB_PORT}", "-S", "-d", "cpu_reset"]

[tasks.doc]
workspace = false
description = "Generate the project's documentation"
env = { "RUSTFLAGS" = "--sysroot=${PWD}/target/sysroot",  "RUSTDOCFLAGS" = "--sysroot=${PWD}/target/sysroot"}
command = "cargo"
args = ["doc", "--target=${TARGET}", "--no-deps" ]

[tasks.doc-full]
workspace = false
description = "Generate the project's documentation, including private items"
env = { "RUSTFLAGS" = "--sysroot=${PWD}/target/sysroot",  "RUSTDOCFLAGS" = "--sysroot=${PWD}/target/sysroot -Z unstable-options --enable-index-page"}
command = "cargo"
args = ["doc", "--target=${TARGET}", "--no-deps", "--document-private-items"]

[tasks.deploy-doc]
workspace = false
install_crate = { crate_name = "cargo-travis", binary = "cargo", test_arg = "doc-upload --help" }
install_crate_args = ["--git", "https://github.com/roblabla/cargo-travis", "--rev", "doc-upload-target"]
description = "Upload this project's documentation on github pages. Should only run on CI."
command = "cargo"
args = ["doc-upload", "--target=${TARGET}", "--clobber-index"]

[tasks.test]
workspace = false
description = "Run the tests in 32bit mode"
command = "cargo"
args = ["test", "--target=i686-unknown-linux-gnu"]

[tasks.clippy]
workspace = false
dependencies = ["install-rust-src"]
install_crate = { rustup_component_name = "clippy" }
description = "Run clippy"
command = "cargo"
args = ["xclippy", "--target=${TARGET}", "--",
	"-A", "clippy::redundant_field_names",
	"-A", "clippy::unreadable_literal",
	"-A", "clippy::identity_op",
	"-A", "clippy::zero_prefixed_literal",
	"-W", "clippy::cast_possible_wrap",
	"-W", "clippy::cast_sign_loss",
	"-W", "clippy::default_trait_access",
	"-W", "clippy::explicit_into_iter_loop",
	"-W", "clippy::explicit_iter_loop",
	"-W", "clippy::missing_docs_in_private_items",
	"-W", "clippy::mut_mut",
	"-W", "clippy::replace_consts",
	"-W", "clippy::used_underscore_binding",
	"-W", "clippy::wildcard_dependencies",
	"-W", "clippy::wrong_pub_self_convention",
	]

[tasks.clippy-ci]
workspace = false
dependencies = ["install-rust-src"]
install_crate = { rustup_component_name = "clippy" }
description = "Run clippy"
command = "cargo"
args = ["xclippy", "--target=${TARGET}", "--",
	"-A", "clippy::redundant_field_names",
	"-A", "clippy::unreadable_literal",
	"-A", "clippy::identity_op",
	"-A", "clippy::zero_prefixed_literal",
	"-W", "clippy::cast_possible_wrap",
	"-W", "clippy::cast_sign_loss",
	"-W", "clippy::default_trait_access",
	"-W", "clippy::explicit_into_iter_loop",
	"-W", "clippy::explicit_iter_loop",
	"-W", "clippy::missing_docs_in_private_items",
	"-W", "clippy::mut_mut",
	"-W", "clippy::replace_consts",
	"-W", "clippy::used_underscore_binding",
	"-W", "clippy::wildcard_dependencies",
	"-W", "clippy::wrong_pub_self_convention",
	"-D", "warnings"
	]

